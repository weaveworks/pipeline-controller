// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/fluxcd/go-git-providers/gitprovider (interfaces: Client,UserRepositoriesClient,UserRepository,PullRequestClient,PullRequest)

// Package pullrequest_test is a generated GoMock package.
package pullrequest_test

import (
	context "context"
	reflect "reflect"

	gitprovider "github.com/fluxcd/go-git-providers/gitprovider"
	gomock "github.com/golang/mock/gomock"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// HasTokenPermission mocks base method.
func (m *MockClient) HasTokenPermission(arg0 context.Context, arg1 gitprovider.TokenPermission) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasTokenPermission", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HasTokenPermission indicates an expected call of HasTokenPermission.
func (mr *MockClientMockRecorder) HasTokenPermission(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasTokenPermission", reflect.TypeOf((*MockClient)(nil).HasTokenPermission), arg0, arg1)
}

// OrgRepositories mocks base method.
func (m *MockClient) OrgRepositories() gitprovider.OrgRepositoriesClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OrgRepositories")
	ret0, _ := ret[0].(gitprovider.OrgRepositoriesClient)
	return ret0
}

// OrgRepositories indicates an expected call of OrgRepositories.
func (mr *MockClientMockRecorder) OrgRepositories() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OrgRepositories", reflect.TypeOf((*MockClient)(nil).OrgRepositories))
}

// Organizations mocks base method.
func (m *MockClient) Organizations() gitprovider.OrganizationsClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Organizations")
	ret0, _ := ret[0].(gitprovider.OrganizationsClient)
	return ret0
}

// Organizations indicates an expected call of Organizations.
func (mr *MockClientMockRecorder) Organizations() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Organizations", reflect.TypeOf((*MockClient)(nil).Organizations))
}

// ProviderID mocks base method.
func (m *MockClient) ProviderID() gitprovider.ProviderID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProviderID")
	ret0, _ := ret[0].(gitprovider.ProviderID)
	return ret0
}

// ProviderID indicates an expected call of ProviderID.
func (mr *MockClientMockRecorder) ProviderID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProviderID", reflect.TypeOf((*MockClient)(nil).ProviderID))
}

// Raw mocks base method.
func (m *MockClient) Raw() interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Raw")
	ret0, _ := ret[0].(interface{})
	return ret0
}

// Raw indicates an expected call of Raw.
func (mr *MockClientMockRecorder) Raw() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Raw", reflect.TypeOf((*MockClient)(nil).Raw))
}

// SupportedDomain mocks base method.
func (m *MockClient) SupportedDomain() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SupportedDomain")
	ret0, _ := ret[0].(string)
	return ret0
}

// SupportedDomain indicates an expected call of SupportedDomain.
func (mr *MockClientMockRecorder) SupportedDomain() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SupportedDomain", reflect.TypeOf((*MockClient)(nil).SupportedDomain))
}

// UserRepositories mocks base method.
func (m *MockClient) UserRepositories() gitprovider.UserRepositoriesClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserRepositories")
	ret0, _ := ret[0].(gitprovider.UserRepositoriesClient)
	return ret0
}

// UserRepositories indicates an expected call of UserRepositories.
func (mr *MockClientMockRecorder) UserRepositories() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserRepositories", reflect.TypeOf((*MockClient)(nil).UserRepositories))
}

// MockUserRepositoriesClient is a mock of UserRepositoriesClient interface.
type MockUserRepositoriesClient struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepositoriesClientMockRecorder
}

// MockUserRepositoriesClientMockRecorder is the mock recorder for MockUserRepositoriesClient.
type MockUserRepositoriesClientMockRecorder struct {
	mock *MockUserRepositoriesClient
}

// NewMockUserRepositoriesClient creates a new mock instance.
func NewMockUserRepositoriesClient(ctrl *gomock.Controller) *MockUserRepositoriesClient {
	mock := &MockUserRepositoriesClient{ctrl: ctrl}
	mock.recorder = &MockUserRepositoriesClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepositoriesClient) EXPECT() *MockUserRepositoriesClientMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockUserRepositoriesClient) Create(arg0 context.Context, arg1 gitprovider.UserRepositoryRef, arg2 gitprovider.RepositoryInfo, arg3 ...gitprovider.RepositoryCreateOption) (gitprovider.UserRepository, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Create", varargs...)
	ret0, _ := ret[0].(gitprovider.UserRepository)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockUserRepositoriesClientMockRecorder) Create(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUserRepositoriesClient)(nil).Create), varargs...)
}

// Get mocks base method.
func (m *MockUserRepositoriesClient) Get(arg0 context.Context, arg1 gitprovider.UserRepositoryRef) (gitprovider.UserRepository, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(gitprovider.UserRepository)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockUserRepositoriesClientMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockUserRepositoriesClient)(nil).Get), arg0, arg1)
}

// List mocks base method.
func (m *MockUserRepositoriesClient) List(arg0 context.Context, arg1 gitprovider.UserRef) ([]gitprovider.UserRepository, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1)
	ret0, _ := ret[0].([]gitprovider.UserRepository)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockUserRepositoriesClientMockRecorder) List(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockUserRepositoriesClient)(nil).List), arg0, arg1)
}

// Reconcile mocks base method.
func (m *MockUserRepositoriesClient) Reconcile(arg0 context.Context, arg1 gitprovider.UserRepositoryRef, arg2 gitprovider.RepositoryInfo, arg3 ...gitprovider.RepositoryReconcileOption) (gitprovider.UserRepository, bool, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Reconcile", varargs...)
	ret0, _ := ret[0].(gitprovider.UserRepository)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Reconcile indicates an expected call of Reconcile.
func (mr *MockUserRepositoriesClientMockRecorder) Reconcile(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reconcile", reflect.TypeOf((*MockUserRepositoriesClient)(nil).Reconcile), varargs...)
}

// MockUserRepository is a mock of UserRepository interface.
type MockUserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepositoryMockRecorder
}

// MockUserRepositoryMockRecorder is the mock recorder for MockUserRepository.
type MockUserRepositoryMockRecorder struct {
	mock *MockUserRepository
}

// NewMockUserRepository creates a new mock instance.
func NewMockUserRepository(ctrl *gomock.Controller) *MockUserRepository {
	mock := &MockUserRepository{ctrl: ctrl}
	mock.recorder = &MockUserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepository) EXPECT() *MockUserRepositoryMockRecorder {
	return m.recorder
}

// APIObject mocks base method.
func (m *MockUserRepository) APIObject() interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "APIObject")
	ret0, _ := ret[0].(interface{})
	return ret0
}

// APIObject indicates an expected call of APIObject.
func (mr *MockUserRepositoryMockRecorder) APIObject() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "APIObject", reflect.TypeOf((*MockUserRepository)(nil).APIObject))
}

// Branches mocks base method.
func (m *MockUserRepository) Branches() gitprovider.BranchClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Branches")
	ret0, _ := ret[0].(gitprovider.BranchClient)
	return ret0
}

// Branches indicates an expected call of Branches.
func (mr *MockUserRepositoryMockRecorder) Branches() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Branches", reflect.TypeOf((*MockUserRepository)(nil).Branches))
}

// Commits mocks base method.
func (m *MockUserRepository) Commits() gitprovider.CommitClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Commits")
	ret0, _ := ret[0].(gitprovider.CommitClient)
	return ret0
}

// Commits indicates an expected call of Commits.
func (mr *MockUserRepositoryMockRecorder) Commits() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commits", reflect.TypeOf((*MockUserRepository)(nil).Commits))
}

// Delete mocks base method.
func (m *MockUserRepository) Delete(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockUserRepositoryMockRecorder) Delete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockUserRepository)(nil).Delete), arg0)
}

// DeployKeys mocks base method.
func (m *MockUserRepository) DeployKeys() gitprovider.DeployKeyClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeployKeys")
	ret0, _ := ret[0].(gitprovider.DeployKeyClient)
	return ret0
}

// DeployKeys indicates an expected call of DeployKeys.
func (mr *MockUserRepositoryMockRecorder) DeployKeys() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeployKeys", reflect.TypeOf((*MockUserRepository)(nil).DeployKeys))
}

// Files mocks base method.
func (m *MockUserRepository) Files() gitprovider.FileClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Files")
	ret0, _ := ret[0].(gitprovider.FileClient)
	return ret0
}

// Files indicates an expected call of Files.
func (mr *MockUserRepositoryMockRecorder) Files() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Files", reflect.TypeOf((*MockUserRepository)(nil).Files))
}

// Get mocks base method.
func (m *MockUserRepository) Get() gitprovider.RepositoryInfo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get")
	ret0, _ := ret[0].(gitprovider.RepositoryInfo)
	return ret0
}

// Get indicates an expected call of Get.
func (mr *MockUserRepositoryMockRecorder) Get() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockUserRepository)(nil).Get))
}

// PullRequests mocks base method.
func (m *MockUserRepository) PullRequests() gitprovider.PullRequestClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PullRequests")
	ret0, _ := ret[0].(gitprovider.PullRequestClient)
	return ret0
}

// PullRequests indicates an expected call of PullRequests.
func (mr *MockUserRepositoryMockRecorder) PullRequests() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PullRequests", reflect.TypeOf((*MockUserRepository)(nil).PullRequests))
}

// Reconcile mocks base method.
func (m *MockUserRepository) Reconcile(arg0 context.Context) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reconcile", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Reconcile indicates an expected call of Reconcile.
func (mr *MockUserRepositoryMockRecorder) Reconcile(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reconcile", reflect.TypeOf((*MockUserRepository)(nil).Reconcile), arg0)
}

// Repository mocks base method.
func (m *MockUserRepository) Repository() gitprovider.RepositoryRef {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Repository")
	ret0, _ := ret[0].(gitprovider.RepositoryRef)
	return ret0
}

// Repository indicates an expected call of Repository.
func (mr *MockUserRepositoryMockRecorder) Repository() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Repository", reflect.TypeOf((*MockUserRepository)(nil).Repository))
}

// Set mocks base method.
func (m *MockUserRepository) Set(arg0 gitprovider.RepositoryInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockUserRepositoryMockRecorder) Set(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockUserRepository)(nil).Set), arg0)
}

// Trees mocks base method.
func (m *MockUserRepository) Trees() gitprovider.TreeClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trees")
	ret0, _ := ret[0].(gitprovider.TreeClient)
	return ret0
}

// Trees indicates an expected call of Trees.
func (mr *MockUserRepositoryMockRecorder) Trees() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trees", reflect.TypeOf((*MockUserRepository)(nil).Trees))
}

// Update mocks base method.
func (m *MockUserRepository) Update(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockUserRepositoryMockRecorder) Update(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockUserRepository)(nil).Update), arg0)
}

// MockPullRequestClient is a mock of PullRequestClient interface.
type MockPullRequestClient struct {
	ctrl     *gomock.Controller
	recorder *MockPullRequestClientMockRecorder
}

// MockPullRequestClientMockRecorder is the mock recorder for MockPullRequestClient.
type MockPullRequestClientMockRecorder struct {
	mock *MockPullRequestClient
}

// NewMockPullRequestClient creates a new mock instance.
func NewMockPullRequestClient(ctrl *gomock.Controller) *MockPullRequestClient {
	mock := &MockPullRequestClient{ctrl: ctrl}
	mock.recorder = &MockPullRequestClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPullRequestClient) EXPECT() *MockPullRequestClientMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockPullRequestClient) Create(arg0 context.Context, arg1, arg2, arg3, arg4 string) (gitprovider.PullRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(gitprovider.PullRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockPullRequestClientMockRecorder) Create(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockPullRequestClient)(nil).Create), arg0, arg1, arg2, arg3, arg4)
}

// Edit mocks base method.
func (m *MockPullRequestClient) Edit(arg0 context.Context, arg1 int, arg2 gitprovider.EditOptions) (gitprovider.PullRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Edit", arg0, arg1, arg2)
	ret0, _ := ret[0].(gitprovider.PullRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Edit indicates an expected call of Edit.
func (mr *MockPullRequestClientMockRecorder) Edit(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Edit", reflect.TypeOf((*MockPullRequestClient)(nil).Edit), arg0, arg1, arg2)
}

// Get mocks base method.
func (m *MockPullRequestClient) Get(arg0 context.Context, arg1 int) (gitprovider.PullRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(gitprovider.PullRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockPullRequestClientMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockPullRequestClient)(nil).Get), arg0, arg1)
}

// List mocks base method.
func (m *MockPullRequestClient) List(arg0 context.Context) ([]gitprovider.PullRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0)
	ret0, _ := ret[0].([]gitprovider.PullRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockPullRequestClientMockRecorder) List(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockPullRequestClient)(nil).List), arg0)
}

// Merge mocks base method.
func (m *MockPullRequestClient) Merge(arg0 context.Context, arg1 int, arg2 gitprovider.MergeMethod, arg3 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Merge", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// Merge indicates an expected call of Merge.
func (mr *MockPullRequestClientMockRecorder) Merge(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Merge", reflect.TypeOf((*MockPullRequestClient)(nil).Merge), arg0, arg1, arg2, arg3)
}

// MockPullRequest is a mock of PullRequest interface.
type MockPullRequest struct {
	ctrl     *gomock.Controller
	recorder *MockPullRequestMockRecorder
}

// MockPullRequestMockRecorder is the mock recorder for MockPullRequest.
type MockPullRequestMockRecorder struct {
	mock *MockPullRequest
}

// NewMockPullRequest creates a new mock instance.
func NewMockPullRequest(ctrl *gomock.Controller) *MockPullRequest {
	mock := &MockPullRequest{ctrl: ctrl}
	mock.recorder = &MockPullRequestMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPullRequest) EXPECT() *MockPullRequestMockRecorder {
	return m.recorder
}

// APIObject mocks base method.
func (m *MockPullRequest) APIObject() interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "APIObject")
	ret0, _ := ret[0].(interface{})
	return ret0
}

// APIObject indicates an expected call of APIObject.
func (mr *MockPullRequestMockRecorder) APIObject() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "APIObject", reflect.TypeOf((*MockPullRequest)(nil).APIObject))
}

// Get mocks base method.
func (m *MockPullRequest) Get() gitprovider.PullRequestInfo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get")
	ret0, _ := ret[0].(gitprovider.PullRequestInfo)
	return ret0
}

// Get indicates an expected call of Get.
func (mr *MockPullRequestMockRecorder) Get() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockPullRequest)(nil).Get))
}
